## 주교재 : 혼자 공부하는 파이썬

# 01-1 파이썬을 하기 전에 읽는 아주 간단한 설명
# 컴퓨터 프로그램(computer program) - 컴퓨터가 무엇을 해야 할지 미리 작성한 진행 계획
# 소스 코드(source code) - 프로그래밍 언어로 사람이 쉽게 읽고 이해할 수 있도록 만든 코드

# 01-2 파이썬을 배우기 위해 준비해야 할 것들
# 텍스트 에디터(text editor) - 파이썬 코드를 입력
# 파이썬 인터프리터 - 파이썬 코드를 실행

# 01-3 이 책에서 자주 나오는 파이썬 용어들
# 표현식 : 값을 만들어 내는 코드
#        - 키워드 : 언어가 처음 만들어질 때 정한 단어 (ex. import)

# 문장  : 표현식이 하나 이상 모인 것 (ex. print("Hello World"))

# 프로그램 : 문장이 모인 것
#         - 주석 : 프로그램에 영향을 주지 않는 코드 (ex. #예시)
#         - 식별자 : 사용자가 만들 수 있는 단어

# 표현식과 문장
# 표현식(expression) : 어떠한 값을 만들어 내는 간단한 코드
# 값? => 숫자, 수식, 문자열 등과 같은 것을 의미함.
# 273 / 10 + 20 + 30 * 10 / "Python Programming"

# 키워드(keyword)
# 키워드는 특별한 의미가 부여된 단어, 파이썬이 만들어질 때 이미 사용하겠다고 예약해 놓는 것.
# ex) False,break,else,if,not,while,None,class,except,....
# 파이썬은 대소문자를 구분함 => True는 키워드지만, true는 키워드가 아님
# 사용 되는 언어가 키워드인지 아닌지 꼭 확인해야 할 경우
import keyword
print(keyword.kwlist)
#['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif',
# 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or',
# 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

# 식별자(identifier)
# 식별자는 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어. 주로 변수 또는 함수 이름 등으로 사용
# 다음과 같은 규칙을 지켜 만들어야 함
# 1. 키워드를 사용하면 안 됩니다.
# 2. 특수 문자는 언더 바 (_)만 허용됩니다.
# 3. 숫자로 시작하면 안 됩니다.
# 4. 공백을 포함할 수 없습니다.
# 5. 한글, 한자, 일본어와 같은 전세계 언어를 사용할 수는 있으나, 알파벳을 사용하는 것이 관례입니다.
# 6. 스네이크 케이스(snake_case), 카멜 케이스(CamelCase)
# 7. 식별자 - 캐멀 케이스(대문자로 시작) -> 클래스
#         - 스네이크 케이스(소문자로 시작) - 뒤에 괄호가 있다 -> 함수
#                                  - 뒤에 괄호가 없다 -> 변수
# 예외는 있음.
# 7. example 식별자가 클래스인지, 변수인지, 함수인지 구분하시오.
# 7-1. print()     함수
# 7-2. list()      함수
# 7-3. soup.select() 함수
# 7-4. math.pi 변수
# 7-5. mathe.e 변수
# 7-6. class Animal : * 캐멀 케이스이므로 클래스이다.
# 7-7. BeautifulSoup() 클래스 * 그런데 뒤에 괄호가 있음 => '클래스 생성자'라고 부르는 특이한 형태의 함수 뒤에서 계속

# 주석(comment)
# 주석은 프로그램의 진행에 전혀 영향을 주지 않는 코드, 프로그램을 설명하기 위해 사용

# 연산자와 자료
# 연산자는 스스로 값이 되는 것이 아니고, 값과 값 사이에 무언가 기능을 적용할때 사용
# 즉, +,- 와 같이 단독으로 쓰일 때는 아무 의미를 갖지 못하지만,
# 1 + 1
# 10 - 10 은 더하기, 빼기와 같은 기능을 수행

# 자료 -> 리터럴 (literal)
# 자료는 숫자이든지 문자이든지 어떠한 '값' 자체를 의미

# *** 출력 : print() ***
# 기본적인 출력 방법

# 하나만 출력하기
print("Hello Python Programming...!")
print(52)

# 여러 개 출력하기
# print 명령어 뒤에 출력하고 싶은 내용을 쉼표로 연결해서 여러 개 적어도 됨.
print(52, 273, "Hello")
print("안녕하세요","저의","이름은","김태경입니다!")
print("안녕하세요", "저의", "이름은", "김태경입니다!")
# 안녕하세요 저의 이름은 김태경입니다!  *띄어쓰기?

# 줄바꿈하기
# print 명령의 괄호 안에 아무것도 입력하지 않으면, 아무것도 출력하지 않고 단순하게 줄바꿈을 함.
print("# 아무것도 출력하지 않습니다.")
print("------check line-----")
print()
print()
print("------check line-----")